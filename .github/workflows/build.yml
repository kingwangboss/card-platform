name: Build and Release

on:
  push:
    tags:
      - 'v*'
    # 只在创建标签时运行，不在提交代码时运行
    # branches:
    #   - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.85.0

jobs:
  build:
    # 检查提交信息，如果包含 [skip ci] 或 [ci skip]，则跳过工作流
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: card-platform
            asset_name: card-platform-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: card-platform.exe
            asset_name: card-platform-windows-amd64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install OpenSSL (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install openssl

      - name: Show Rust version
        run: |
          rustc --version
          cargo --version

      - name: Build (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --release --verbose
          echo "Build completed"
          ls -la target/release/

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --release --verbose
          echo "Build completed"
          dir target\release\

      - name: Prepare assets (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release
          cp target/release/card-platform release/
          cp -r static release/
          cp .env.example release/.env
          cd release
          tar -czvf "../${{ matrix.asset_name }}.tar.gz" *
          echo "Archive created successfully"
          ls -la ..

      - name: Prepare assets (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p release
          cp target/release/card-platform.exe release/
          cp -r static release/
          cp .env.example release/.env
          cd release
          7z a -tzip "../${{ matrix.asset_name }}.zip" *
          echo "Archive created successfully"
          ls -la ..

      - name: Upload artifacts (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.tar.gz
          if-no-files-found: warn

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.zip
          if-no-files-found: warn

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            card-platform-linux-amd64/*.tar.gz
            card-platform-windows-amd64/*.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 